from urllib.parse import unquote
import json
from django.contrib.sites.models import Site
from django.shortcuts import get_object_or_404
from rest_framework.decorators import api_view
from rest_framework.pagination import PageNumberPagination
from rest_framework.response import Response

from .serializers import LikeSerializer
from honeydew.models import Like, Post
from stream.views import friends_list


HTTP = "https://"
SITE = Site.objects.get_current


@api_view(['GET'])
def get_post_likes(request, author_serial, post_serial):
    """
        authors/<int:author_serial>/posts/<int:post_serial>/likes

        Who Liked This Post"
        GET [local, remote] a list of likes from OTHER authors on AUTHOR_SERIAL's post POST_SERIAL
        Body is likes object

        author_serial is the author who made the post.
    """
    # Get Query Parameters from request. 1 Based Indexing
    # Ex: ?page=4&size=40
    page_number = int(request.GET.get('page', 1))  # Default first page
    page_size = int(request.GET.get('size', 5))  # Default size 5

    # Get Post object
    post = get_object_or_404(Post,
                             author__serial=author_serial,
                             serial=post_serial)

    if post.visibility == "FRIENDS":
        post_author_fqid = post.author_id
        post_author_friends = friends_list(post_author_fqid)
        if request.user.author.fqid not in post_author_friends:
            return Response(status=401) #requestor is not a friend of post author and therefore cannot see comments on post

    # Query all like objects corresponding to the all other authors
    likes = Like.objects.filter(post=post)\
                        .exclude(author__serial=author_serial)\
                        .order_by('-published') # Exclude Likes from post's author.
    total_likes = likes.count()

    # Apply pagination: https://www.django-rest-framework.org/api-guide/pagination/#pagenumberpagination
    paginate = PageNumberPagination()
    paginate.page = page_number
    paginate.page_size = page_size
    paginated_likes = paginate.paginate_queryset(likes, request)

    # Create a list of likes (src)
    src = LikeSerializer(paginated_likes, many=True)

    # Format the response data into a "Likes" object
    response_data = {
        "type": "likes",
        "page": post.fqid,
        "id": f"{post.fqid}/likes",
        "page_number": page_number,
        "size": page_size,
        "count": total_likes,
        "src": src.data
    }

    return Response(response_data, status=200)

@api_view(['POST'])
def get_post_all_likes(request):
    """
        GET [local, remote] a list of likes from ALL authors on AUTHOR_SERIAL's post POST_SERIAL
        /api/authors/<int:author_serial>/posts/<int:post_serial>/all_likes

                                    Extra API function.
        - Difference between this and get_post_likes, is that this function
            does not exclude like's generated by the author corresponding to author_serial.
        - This function also does not do pagination, thereby loading ALL likes for a particular posts.

        Inputs:
            author_serial is the author who made the post.
            post_serial is the post being liked

        Returns:
            likes object

        author_serial is the author who made the post.
    """
    print("**** in get_post_all_likes *****")
    body_data = json.loads(request.body)
    # Get post object
    post = get_object_or_404(Post,
                             author__fqid=body_data.get('author_fqid'),
                             fqid=body_data.get('post_fqid'))

    if post.visibility == "FRIENDS":
        post_author_fqid = post.author_id
        post_author_friends = friends_list(post_author_fqid)
        if request.user.author.fqid not in post_author_friends:
            return Response(status=401) #requestor is not a friend of post author and therefore cannot see likes on post

    # Query all like objects corresponding to the all other authors
    likes = Like.objects.filter(post=post).order_by('-published')
    total_likes = likes.count()

    # Create a list of likes (src)
    src = LikeSerializer(likes, many=True)

    # Format the response data into a "Likes" object
    response_data = {
        "type": "likes",
        "page": post.fqid,
        "id": f"{post.fqid}/likes",
        "page_number": 1,
        "size": total_likes,
        "count": total_likes,
        "src": src.data
    }

    return Response(response_data, status=200)

@api_view(['GET'])
def get_fqid_post_likes(request, fqid):
    """
        "Who Liked This Post"
        url: 'posts/<str:fqid>/likes'

        Returns a list of likes from other
        authors on AUTHOR_SERIAL's post POST_SERIAL
    """

    # Get Requester info here so we don't crash
    requester = "\\\\\\\\"
    if request.user.is_authenticated:
        requester = request.user.author.fqid

    # Get Query Parameters from request. 1 Based Indexing
    # Ex: ?page=4&size=40
    page_number = int(request.GET.get('page', 1))  # Default first page
    page_size = int(request.GET.get('size', 5))  # Default size 5

    # Get post object
    fqid = unquote(fqid) # Percent Decode fqid
    post = get_object_or_404(Post, fqid=fqid)

    if post.visibility == Post.FRIENDS:
        post_author_fqid = post.author.fqid
        post_author_friends = friends_list(post_author_fqid)
        if requester not in post_author_friends:
            return Response(status=401) #requestor is not a friend of post author and therefore cannot see likes on post

    # Query all like objects corresponding to the all other authors
    likes = Like.objects.filter(post=post)\
                        .exclude(author__serial=post.author.serial)\
                        .order_by('-published')  # Exclude Likes from post's author.
    total_likes = likes.count()

    # Apply pagination: https://www.django-rest-framework.org/api-guide/pagination/#pagenumberpagination
    paginate = PageNumberPagination()
    paginate.page = page_number
    paginate.page_size = page_size
    paginated_likes = paginate.paginate_queryset(likes, request)

    # Create a list of likes (src)
    src = LikeSerializer(paginated_likes, many=True)

    # Format the response data into a "Likes" object
    response_data = {
        "type": "likes",
        "page": post.fqid,
        "id": f"{post.fqid}/likes",
        "page_number": page_number,
        "size": page_size,
        "count": total_likes,
        "src": src.data
    }
    return Response(response_data, status=200)


@api_view(['GET'])
def get_comment_likes(request, author_serial, post_serial, comment_serial):
    """
        Who Liked This Comment"
        GET [local, remote] a list of likes from other authors on AUTHOR_SERIAL's
        post POST_SERIAL comment COMMENT_SERIAL
    """


@api_view(['GET'])
def get_like(request, like_fqid):
    """
    GET [local] a single like

    Input:
        (String) author_fqid: Example: "http://nodeaaaa/api/authors/111/liked/166"

    URL Parameters:
    - like_fqid (url): The fqid of the like object. Example: "http://example.com/api/authors/2/liked/1"

    Full Example usage:
        http://{site}/api/liked/<path:like_fqid>
        where site is replaced by the host name.

    Returns:
    - Like Object in JSON Formatting.
    """
    # Percent Decode fqid
    like_fqid = unquote(like_fqid)
    # Extract Like Serial From FQID
    like = get_object_or_404(Like, fqid=like_fqid)
    serializer = LikeSerializer(like)
    return Response(serializer.data, status=200)
