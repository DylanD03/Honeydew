
'''
Script to populate database with test data (sloth themed!)
Generated by ChatGPT
Command to run: python manage.py populateDatabase
'''

import random
from django.core.management.base import BaseCommand
from django.contrib.sites.models import Site
from django.utils import timezone
from threading import Lock
from honeydew.models import Author, Post, Like, Comment, Follow, FollowRequest, Friendship

# Sample data for generating donut-related content
titles = [
    "The Perfect Donut",
    "A Journey into Donut Flavors",
    "Donut Making Secrets",
    "Why Donuts Are the Best Dessert",
    "Exploring Donut Glazes",
]

descriptions = [
    "An insightful article about donut perfection.",
    "Discover the wonderful world of donuts.",
    "Tips and tricks for making delicious donuts.",
    "The science behind the love of donuts.",
    "All about the best glazes for donuts.",
]

markdown_content = [
    "# Donut Delights\nThis is a guide to making **the most delicious** donuts ever.",
    "## The Secret Ingredient\nTo make your donuts fluffy, always use *fresh yeast*.",
    "### Types of Donut Fillings\n- Chocolate\n- Strawberry\n- Vanilla\n",
    "> Donuts are proof that good things come in circles.",
    "#### Glaze Perfection\nMix sugar, milk, and a hint of vanilla for a glossy finish.",
]

plain_text_content = [
    "Donuts are a beloved treat enjoyed worldwide.",
    "Fried dough rings make the perfect comfort food.",
    "Baking donuts can be as rewarding as eating them.",
    "The history of donuts is rich and delicious.",
    "Everyone loves a good chocolate donut.",
]

comments = [
    "I totally agree, donuts are the best!",
    "This article made me crave donuts.",
    "Great tips on making perfect donuts.",
    "Love this guide, very informative!",
    "Now I need to try making my own donuts.",
]

class Command(BaseCommand):
    help = 'Populate the database with sample data'

    def handle(self, *args, **kwargs):
        current_site = Site.objects.get_current()
        
        # Create sample authors
        authors = []
        for i in range(20):  # Creating 20 authors
            author = Author(
                display_name=f"Donut Lover {i+1}",
                host=f"http://{current_site.domain}/api/",
                github=f"https://github.com/donut_lover_{i+1}",
                local=True
            )
            author.save()
            authors.append(author)
        self.stdout.write(self.style.SUCCESS(f"Created {len(authors)} authors."))

        # Create sample posts for each author
        posts = []
        for author in authors:
            for _ in range(2):  # Two posts per author
                title = random.choice(titles)
                description = random.choice(descriptions)
                content_type = random.choice(["text/plain", "text/markdown"])
                content = random.choice(markdown_content) if content_type == "text/markdown" else random.choice(plain_text_content)

                post = Post(
                    author=author,
                    title=title,
                    description=description,
                    content_type=content_type,
                    content=content,
                    visibility=random.choice([Post.PUBLIC, Post.FRIENDS, Post.UNLISTED]),
                    published=timezone.now()
                )
                post.save()
                posts.append(post)
        self.stdout.write(self.style.SUCCESS(f"Created {len(posts)} posts."))

        # Create sample likes
        likes = []
        for post in posts:
            author = random.choice(authors)
            like = Like(
                author=author,
                post=post,
                published=timezone.now()
            )
            like.save()
            likes.append(like)
        self.stdout.write(self.style.SUCCESS(f"Created {len(likes)} likes."))

        # Create sample comments
        comments_list = []
        for post in posts:
            author = random.choice(authors)
            comment = Comment(
                author=author,
                post=post,
                content_type="text/plain",
                content=random.choice(comments),
                published=timezone.now()
            )
            comment.save()
            comments_list.append(comment)
        self.stdout.write(self.style.SUCCESS(f"Created {len(comments_list)} comments."))

        # Create sample follow relationships
        follows = []
        for _ in range(10):  # Creating 10 random follow relationships
            follower = random.choice(authors)
            following = random.choice(authors)
            if follower != following:  # Ensure an author is not following themselves
                follow = Follow(
                    follower=follower,
                    following=following
                )
                follow.save()
                follows.append(follow)
        self.stdout.write(self.style.SUCCESS(f"Created {len(follows)} follow relationships."))

        # Create sample follow requests
        follow_requests = []
        for _ in range(2):  # Creating 2 random follow requests
            requestor = random.choice(authors)
            receiver = random.choice(authors)
            if requestor != receiver:
                follow_request = FollowRequest(
                    summary=f"{requestor.display_name} wants to follow {receiver.display_name}",
                    requestor=requestor,
                    reciever=receiver
                )
                follow_request.save()
                follow_requests.append(follow_request)
        self.stdout.write(self.style.SUCCESS(f"Created {len(follow_requests)} follow requests."))

        # Create sample friendships
        friendships = []
        for follow in follows:
            if Follow.objects.filter(follower=follow.following, following=follow.follower).exists():
                friendship, created = Friendship.objects.get_or_create(
                    author1=min(follow.follower, follow.following, key=lambda x: x.pk),
                    author2=max(follow.follower, follow.following, key=lambda x: x.pk)
                )
                if created:
                    friendships.append(friendship)
        self.stdout.write(self.style.SUCCESS(f"Created {len(friendships)} friendships."))
