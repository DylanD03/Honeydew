# Generated by Django 5.1.1 on 2024-11-22 07:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('serial', models.IntegerField(blank=True, null=True)),
                ('fqid', models.URLField(primary_key=True, serialize=False, unique=True)),
                ('page', models.URLField()),
                ('host', models.URLField()),
                ('display_name', models.CharField(max_length=4096)),
                ('profile_image', models.URLField(blank=True, null=True)),
                ('local', models.BooleanField(default=False)),
                ('github', models.URLField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.CharField(max_length=4096, unique=True)),
                ('username', models.CharField(blank=True, default=None, max_length=4096, null=True)),
                ('password', models.CharField(blank=True, default=None, max_length=4096, null=True)),
                ('enable_connection', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='LocalUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('serial', models.AutoField(primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='honeydew.author')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FollowRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.CharField(max_length=4096)),
                ('reciever', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_receiver', to='honeydew.author')),
                ('requestor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_requestor', to='honeydew.author')),
            ],
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend1', to='honeydew.author')),
                ('author2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend2', to='honeydew.author')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('serial', models.IntegerField(blank=True, null=True)),
                ('fqid', models.URLField(primary_key=True, serialize=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=4096)),
                ('content_type', models.CharField(choices=[('text/plain', 'Plain Text'), ('text/markdown', 'CommonMark'), ('IMAGE', 'Image Post')], max_length=50)),
                ('_content_text', models.TextField(blank=True, null=True)),
                ('_content_image', models.BinaryField(blank=True, null=True)),
                ('published', models.DateTimeField(auto_now_add=True)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Public Post'), ('FRIENDS', 'Friends Only Post'), ('UNLISTED', 'Unlisted Post'), ('DELETED', 'Deleted Post')], max_length=50)),
                ('github_activity_id', models.IntegerField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='honeydew.author')),
                ('shared_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shared_posts', to='honeydew.post')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('serial', models.IntegerField(blank=True, null=True)),
                ('fqid', models.URLField(primary_key=True, serialize=False, unique=True)),
                ('published', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='honeydew.author')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='honeydew.post')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('serial', models.IntegerField(blank=True, null=True)),
                ('fqid', models.URLField(primary_key=True, serialize=False, unique=True)),
                ('published', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.CharField(choices=[('text/plain', 'Plain Text'), ('text/markdown', 'CommonMark')], max_length=50)),
                ('content', models.TextField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='honeydew.author')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='honeydew.post')),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower', to='honeydew.author')),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to='honeydew.author')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('follower', 'following'), name='unique_follow_pairs'), models.CheckConstraint(condition=models.Q(('following', models.F('follower')), _negated=True), name='not_following_self')],
            },
        ),
    ]
